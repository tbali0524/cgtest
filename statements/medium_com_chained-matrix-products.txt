Chained Matrix Products

medium_com_chained-matrix-products
https://www.codingame.com/training/medium/chained-matrix-products
https://www.codingame.com/contribute/view/47841f4651e9e5c392bd65e943fc2b15f623

A contribution by DPAmar

The matrix product is an operation that, given matrices A[i,k] (i rows and k columns) and B[k,j], produces matrix C[i,j] where C_x,y is, for each x in 1..i and y = 1..j, the sum of A_x,z*B_z,y for all z in 1..k
One can see that i*j*k multiplications are needed to compute C.

Matrix product is an associative operation. This means that given matrices A, B and C with consistent dimensions, then (A.B).C = A.(B.C) = A.B.C; in other words the result remains the same whatever the product order.

<<But complexity is not associative!>> Given A[3,1000], B[1000,5] and C[5,2000] for example:
- (A.B).C requires 3x1000x5 + 3x5x2000 = 45.000 multiplications
- A.(B.C) requires 1000x5x2000 + 3x1000x2000 = 16.000.000 multiplications!!!
And this is a (bit extreme) case for 2 products, but the longer the product chain, the more important the difference can be.

The goal is, given [[N]] pairs of dimensions, to compute the least number of multiplications needed.

Note 1: Actually, there are more efficient algorithms for matrix product that use for example divide and conquer to reduce complexity. But we will only consider the common way described above.
For more information, you can have a look at Strassen or Coppersmithâ€“Winograd algorithms.
Note 2: This product ordering optimization works anyway for different matrix product algorithms.

Difficulty
Medium

Tags
Matrix product, Optimization, Complexity, Dynamic programming
